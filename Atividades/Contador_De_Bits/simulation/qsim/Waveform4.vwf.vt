// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2018 15:52:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          contador_de_bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module contador_de_bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data_in;
reg reset;
reg valid_in;
// wires                                               
wire [2:0] data_out;
wire [1:0] estados;
wire read_in;

// assign statements (if any)                          
contador_de_bits i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_in(data_in),
	.data_out(data_out),
	.estados(estados),
	.read_in(read_in),
	.reset(reset),
	.valid_in(valid_in)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #40000 1'b1;
	reset = #100000 1'b0;
end 

// valid_in
initial
begin
	valid_in = 1'b0;
	valid_in = #180000 1'b1;
	valid_in = #90000 1'b0;
	valid_in = #130000 1'b1;
	valid_in = #140000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
	data_in[7] = #400000 1'b1;
	data_in[7] = #400000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
	data_in[5] = #180000 1'b1;
	data_in[5] = #620000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #180000 1'b1;
	data_in[3] = #620000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
end 
endmodule

